version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      echo "Destroying environment: << parameters.workflow_id >>"
                      aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

    revert-migrations:
        description: Revert the last migration
        steps:
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      cd ~/project/backend
                      if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; 
                      then
                        npm install
                        npm run migration:revert
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      cd frontend
                      npm install
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      cd backend
                      npm install
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Run frontend test
                  command: |
                      cd frontend
                      npm install
                      npm run test

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Run backend test
                  command: |
                      cd backend
                      npm install
                      npm run test
    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Run frontend scan
                  command: |
                      cd frontend
                      npm install
                      npm audit fix --audit-level=critical --force
                      npm audit --audit-level=critical

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Run backend scan
                  command: |
                      cd backend
                      npm install

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run: yum -y install tar gzip
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/backend.yml \
                        --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/frontend.yml \
                        --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      BACKEND_IP=$(aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
                      echo "[web]" >> .circleci/ansible/inventory.txt
                      echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt
                      cat .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints: ["ba:88:a6:d8:e3:b3:77:d2:7c:e8:0d:5e:2d:a3:ea:83"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add curl
                      apk add tar
                      apk add gzip
                      apk add ansible
                      pip install awscli
            - run:
                  name: Configure server
                  command: |
                      cd .circleci/ansible
                      ansible-playbook -i inventory.txt configure-server.yml
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm run migrations > migrations_dump.txt
            - run:
                  name: Send migration results to kvdb.io
                  command: |
                      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                      then
                        touch ~/project/.circleci/outputs/db_migration_success
                      fi
            - attach_workspace:
                  at: ~/project/.circleci/outputs/
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

    deploy-frontend:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add curl tar
                      apk add gzip
                      apk add ansible
                      apk add nodejs npm
                      pip install awscli
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                      cat frontend/.env
                      echo "${API_URL}"
            - run:
                  name: Deploy frontend objects
                  command: |
                      cd frontend
                      npm install
                      npm run build
                      tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations

    deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints: ["ba:88:a6:d8:e3:b3:77:d2:7c:e8:0d:5e:2d:a3:ea:83"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update curl nodejs npm ansible gzip tar
                      pip install awscli
            - run:
                  name: Deploy backend
                  command: |
                      cd backend
                      npm i
                      npm run build
                      cd ..
                      tar -C backend -czvf artifact.tar.gz .
                      cd .circleci/ansible
                      echo "Contents  of the inventory.txt file is -------"
                      cat inventory.txt
                      ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations

    smoke-test:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update curl nodejs npm
                      pip install awscli
            - run:
                  name: Get backend url
                  command: |
                      BACKEND_IP=`aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text`
                      echo "http://${BACKEND_IP}:3030/api/status"
                      if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
                      then
                          return 0
                      else
                          return 1
                      fi
            - run:
                  name: Frontend smoke test..
                  command: |
                      URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                      echo ${URL} 
                      if curl -s ${URL} | grep "Welcome"
                      then
                        return 0
                      else
                        return 1
                      fi
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations

    cloudfront-update:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Update cloudfront distribution
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name InitialStack \
                      --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations

    cleanup:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      - "ac:40:5d:11:02:0d:87:89:d7:f9:97:2b:8e:af:8e:dd"
            - run:
                  name: Get old stack workflow id
                  command: |
                      export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name=='WorkflowID'].Value" \
                        --no-paginate --output text)
                      echo OldWorkflowID: "${OldWorkflowID}"
                      echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                      export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
                      if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
                      then
                        aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                        aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                        aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                      fi
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - revert-migrations

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - deploy-infrastructure:
                  requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [main]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                  requires: [smoke-test]
            - cleanup:
                  requires: [cloudfront-update]
